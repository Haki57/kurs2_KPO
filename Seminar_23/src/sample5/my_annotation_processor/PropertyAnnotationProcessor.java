package sample5.my_annotation_processor;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.tools.JavaFileObject;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

@SupportedAnnotationTypes({"sample5.my_annotation_processor.Properties", "sample5.my_annotation_processor.Property"})
@SupportedSourceVersion(SourceVersion.RELEASE_11)
public class PropertyAnnotationProcessor extends AbstractProcessor {
    /**
     * {@inheritDoc}
     *
     * @param annotations
     * @param roundEnv
     */
    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
System.out.println(getClass().getName() + ".process(" + annotations + ") invoked.");
        if (annotations.isEmpty())
            return true;
        Map<String, String> propTable = new HashMap<>();
        String beanName = "";
        for (TypeElement t : annotations){
            for (Element element : roundEnv.getElementsAnnotatedWith(t)) {
                beanName = element.toString();
System.out.println("beanName = " + beanName);
                Property[] properties = element.getAnnotation(Properties.class).value();
                for (Property p : properties) {
                    propTable.put(p.name(), p.valueTypeName());
                }
            }
        }

        try {
            writeResultFile(beanName, propTable);
        } catch (IOException e){
            e.printStackTrace();
        }
        return true;
    }

    private void writeResultFile(String beanName, Map<String, String> propTable )
            throws IOException {
        JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(beanName + "WithProperties");
        String sourceFileName = sourceFile.getName();
System.out.println("sourceFileName = " + sourceFileName);
        PrintWriter out = new PrintWriter(sourceFile.openWriter());
//        String packageName = beanName.substring(0, beanName.indexOf('.'));
        String packageName = beanName.substring(0, beanName.lastIndexOf('.'));
System.out.println("packageName = " + packageName);

//        String className = sourceFileName.substring(sourceFileName.indexOf(File.separatorChar) + 1, sourceFileName.indexOf('.'));
        String className = beanName.substring(beanName.lastIndexOf('.') + 1) + "WithProperties";
        out.println("package " + packageName + "; \r\n");
        out.println("import java.beans.*;");
        out.println();
        out.println("/* This source file is automatically generated by PropertyAnnotationProcessor. */");
        out.println();
        out.println("public class " + className + " implements java.io.Serializable {");
        out.println();
        out.println("   private PropertyChangeSupport pcs = new PropertyChangeSupport(this);");
        out.println();
        out.println("   public void addPropertychangeListener(PropertyChangeListener l) {\r\n" +
                    "       pcs.addPropertyChangeListener(l);\r\n" +
                    "   }");
        out.println("   public void removePropertychangeListener(PropertyChangeListener l) {\r\n" +
                    "       pcs.removePropertyChangeListener(l);\r\n" +
                    "   }");
        out.println();
        for (String propertyName : propTable.keySet()){
            String propertyValyeType = propTable.get(propertyName);
            out.println("   private " + propertyValyeType + " " + propertyName + ";");
            String capitalizedPropertyName = capitalize(propertyName);
            out.println();
            out.println("   public synchronized void set" + capitalizedPropertyName + "(" + propertyValyeType + " newValue) {\r\n" +
                        "       " + propertyValyeType + " oldValue = " + propertyName + ";\r\n" +
                        "       " + propertyName + " = " + " newValue;\r\n" +
                        "       " + "pcs.firePropertyChange(\"" + propertyName + "\", oldValue, newValue); \r\n" +
                        "   }");
//            out.println();
            out.println("   public synchronized " + propertyValyeType + " get" + capitalizedPropertyName + "() {\r\n" +
                        "       return " + propertyName + "; \r\n" +
                        "   }");
            out.println();
        }
        out.println("}");
        out.close();
    }

    private static String capitalize(String s) {
        if (s.length() == 0) return s;
//        return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();
        return s.substring(0, 1).toUpperCase() + s.substring(1);
    }

}